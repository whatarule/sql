name: scientific
version: 0.3.4.11
id: scientific-0.3.4.11-21407ea323d887a798d7f4e1f57cbbec
key: scien_LTJLjtgziiDGKCA9xp2hWA
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/wk/giga/hs/stack/test/mysql/.stack-work/install/x86_64-linux/lts-6.11/7.10.3/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11-LTJLjtgziiDGKCA9xp2hWA
library-dirs: /home/wk/giga/hs/stack/test/mysql/.stack-work/install/x86_64-linux/lts-6.11/7.10.3/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11-LTJLjtgziiDGKCA9xp2hWA
data-dir: /home/wk/giga/hs/stack/test/mysql/.stack-work/install/x86_64-linux/lts-6.11/7.10.3/share/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11
hs-libraries: HSscientific-0.3.4.11-LTJLjtgziiDGKCA9xp2hWA
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    binary-0.8.2.1-9b9a1021b2500669ebcb99eaa018e4a0
    bytestring-0.10.6.0-9a873bcf33d6ce2fd2698ce69e2c1c66
    containers-0.5.6.2-59326c33e30ec8f6afd574cbac625bbb
    deepseq-1.4.1.1-614b63b36dd6e29d2b35afff57c25311
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-5fb5e090b265fdba82b49e431838be4c
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    integer-logarithms-1.0.1-e07429175c3e6d89dd23330cf5751a68
    text-1.2.2.1-2f1d28661cf617fbfcd76b9dcf9d31bc
    vector-0.12.0.1-13e1e811fe508cce773acfef50a07c7b
haddock-interfaces: /home/wk/giga/hs/stack/test/mysql/.stack-work/install/x86_64-linux/lts-6.11/7.10.3/doc/scientific-0.3.4.11/scientific.haddock
haddock-html: /home/wk/giga/hs/stack/test/mysql/.stack-work/install/x86_64-linux/lts-6.11/7.10.3/doc/scientific-0.3.4.11
